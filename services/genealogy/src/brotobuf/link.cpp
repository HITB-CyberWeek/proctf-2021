/* This file is auto-generated by brotoc.
 * It's like protoc, but much more cooler. */
#include "link.hpp"
#include "broto.hpp"

#include <memory>
#include <optional>
#include <stdexcept>
#include <string>
#include <tuple>
#include <vector>

namespace brotobuf {
Link::Link() { this->value = ""; }
void Link::serialize(OutputStream &stream) const {
  this->serialize(std::move(stream));
}
void Link::serialize(OutputStream &&stream) const {
  printf("== Starting serialization of Link at %p\n", this);
  this->serialize_type(stream);
  this->serialize_value(stream);
}
void Link::deserialize(InputStream &stream) {
  this->deserialize(std::move(stream));
}
void Link::deserialize(InputStream &&stream) {
  printf("== Starting deserialization of Link at %p\n", this);

  while (stream.has_next()) {
    unsigned long long field_index = this->_deserialize_varint(stream);
    switch (field_index) {

    case 0:
      printf("Writing to %p->type\n", this);
      this->type = this->_deserialize_varint(stream);
      break;
    case 1:
      printf("Writing to %p->value\n", this);
      this->_deserialize_string(this->value, stream);
      break;
    }
  }
}
void Link::serialize_type(OutputStream &stream) const {
  if (this->type == 0)
    return;
  this->_serialize_varint(0, stream);
  this->_serialize_varint(this->type, stream);
}
void Link::serialize_value(OutputStream &stream) const {
  if (this->value == "")
    return;
  this->_serialize_varint(1, stream);
  this->_serialize_string(this->value, stream);
}
} // namespace brotobuf