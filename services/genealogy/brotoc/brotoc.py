#!/usr/bin/env python3

import subprocess

from models import *


Person = Message(
    "Person", [
        Field(0, "birth_date", VarInt()),
        Field(1, "death_date", VarInt()),
        Field(2, "title", String()),
        Field(3, "first_name", String()),
        Field(4, "middle_name", String()),
        Field(5, "last_name", String()),
        Field(6, "photo_url", String()),
        Field(7, "parent", MessageField(lambda: Person), repeated=True, max_repeated=2),
    ]
)

GenealogyTree = Message(
    "GenealogyTree", [
        Field(0, "id", VarInt()),
        Field(1, "title", String()),
        Field(2, "description", String()),
        Field(3, "owner", VarInt(), repeated=True, max_repeated=60),
        Field(4, "person", Optional(MessageField(Person))),
    ]
)

if __name__ == "__main__":
    import pathlib
    folder = pathlib.Path("../src/brotobuf/")

    files = {
        "broto.hpp": Person.generate_common_header_file(),
        "broto.cpp": ["#include \"broto.hpp\""] + list(Person.generate_common_implementation()),

        "person.hpp": ["#include \"broto.hpp\""] + list(Person.generate_header_file()),
        "person.cpp": ["#include \"broto.hpp\"", "#include \"person.hpp\""] + list(Person.generate_code()),

        "tree.hpp": ["#include \"broto.hpp\"", "#include \"person.hpp\""] + list(GenealogyTree.generate_header_file()),
        "tree.cpp": ["#include \"broto.hpp\"", "#include \"person.hpp\"", "#include \"tree.hpp\""] + list(GenealogyTree.generate_code()),
    }

    for file_name, content in files.items():
        content = list(content)
        if file_name.endswith(".hpp"):
            macros = "_" + file_name.upper().replace(".", "_") + "_"
            content = [f"#ifndef {macros}", f"#define {macros}", *content, "#endif"]
        content.insert(0, "/* This file is auto-generated by brotoc.")
        content.insert(1, " * It's like protoc, but much more cooler. */")
        with open(folder / file_name, "w") as file:
            file.write("\n".join(content))
        subprocess.check_output(["clang-format", "-i", (folder / file_name).as_posix()])
